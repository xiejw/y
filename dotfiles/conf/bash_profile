# vim: ft=bash

# ==============================================================================
# system configurations
# ==============================================================================

# ------------------------------------------------------------------------------
# locale and color
# ------------------------------------------------------------------------------
export LANG='en_US.UTF-8'
export TERM='xterm-256color'

# ------------------------------------------------------------------------------
# ps1 and prompt
# ------------------------------------------------------------------------------

# a normal one, trying to display the git branch name.
#
# a sample output looks like
#
# ```
# [~/Workspace/y/dotfiles]
# xiejw:debian-vm (master) -> <cursor>
# ```

function prompt_command {
  export PS1="\n\[\033[1;31m\]${CONDA_PROMPT_MODIFIER}\[\033[0m\][\[\033[1;34m\]\w]\[\033[0m\]\n\[\033[1;${PROMPT_COMMAND_COLOR}m\]\u:\h\[\033[1;33m\] $(${DOTFILES}/bin/prompt)-> \[\033[0m\]"
}

# makes the color different for different hosts.

# -----------------------------------------------
# vm category
if [[ "$HOSTNAME" =~ .*vm.* ]]; then
  export PROMPT_COMMAND_COLOR=33 # yellow 2022-11
elif [[ "$HOSTNAME" =~ .*arm.* ]]; then
  export PROMPT_COMMAND_COLOR=33 # yellow 2022-11
elif [[ "$HOSTNAME" =~ debian-12 ]]; then
  export PROMPT_COMMAND_COLOR=33 # yellow 2023-06
elif [[ "$HOSTNAME" =~ dt ]]; then
  export PROMPT_COMMAND_COLOR=33 # yellow 2023-10
elif [[ "$HOSTNAME" =~ uj ]]; then
  export PROMPT_COMMAND_COLOR=33 # yellow 2023-10

# -----------------------------------------------
# xieqi vpc category
elif [[ "$HOSTNAME" =~ .*xieqi.* ]]; then
  export PROMPT_COMMAND_COLOR=32 # green 2022-11

# -----------------------------------------------
# personal hosts
elif [[ "$HOSTNAME" =~ .*macbook.* ]]; then
  export PROMPT_COMMAND_COLOR=36 # cyan
elif [[ "$HOSTNAME" =~ .*pi.* ]]; then
  export PROMPT_COMMAND_COLOR=35 # magenta 2022-11

# -----------------------------------------------
# defaut
else
  export PROMPT_COMMAND_COLOR=36 # cyan
fi


# exports the prompt_command
export PROMPT_COMMAND=prompt_command

# a function to switch the PROMPT_COMMAND to lite one.
function ed_lite_prompt {
  export LITE_PROMPT=1
}

# ------------------------------------------------------------------------------
# editor env
# ------------------------------------------------------------------------------
export EDITOR=vim

# ------------------------------------------------------------------------------
# shortcuts
# ------------------------------------------------------------------------------

# alias
alias less='less -i'
alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'
alias ll='exa --header --long --color=always'
alias llg='exa --git --header --long --color=always'
alias ll2='exa --header --long --color=always --tree --level=2'

if [[ "$OSTYPE" == "linux-gnu" ]]; then
  alias ls='ls --color'
elif [[ "$OSTYPE" == "freebsd"* ]]; then
  alias ls='ls -G'
elif [[ "$OSTYPE" == "darwin"* ]]; then
  alias ls='ls -G'
fi

# git
alias g='git'
alias ga='git add . && git status -s'
alias gs='git status -s'
alias gd='git diff'
alias gdd='git diff --cached'
alias gdu='git diff --name-only --diff-filter=U'
alias gdn='git diff --name-only'
alias gm='git commit -a'
alias gp='git pull --no-rebase'
alias gg='git log --graph --oneline --all'

# TODO retire gpa
alias gpa='~/Workspace/y/dotfiles/bin/sync_git_repo'
alias jv=' rustc --version > /dev/null 2>&1 || ed_rs && make -C ~/Workspace/x/ann/jarvis'

# tmux
alias tmux="tmux -2"
alias tad='tmux attach -t 0 -d'
alias ta1='tmux attach -t 1 -d'
alias ta2='tmux attach -t 2 -d'
alias ta3='tmux attach -t 3 -d'

# docker
alias d='docker'
alias dr='docker run --rm -ti'
alias drv='docker run --rm -ti -v `pwd`:/workdir'

# make
alias m='make'
alias mc='make compile'
alias mf='make fmt'
alias mt='make test'
alias mta='make ASAN=1 test'
alias mtv='make VERBOSE=1 test'

# vim
alias v='vim'
alias vf='vim `fzf`'
alias vv='vim -c ":call fns#LoadPendingFiles()"'

# ------------------------------------------------------------------------------
# shortcut for ~/Workspace
# ------------------------------------------------------------------------------
function w {
  # try three possible places before give up.
  if [[ $# -eq 1 ]]; then
    if [ -d ~/Workspace/"$1" ]
    then
      cd ~/Workspace/$1
    else
      if [ -d ~/Workspace/core/"$1" ]
      then
        cd ~/Workspace/core/$1
      else
        if [ -d ~/Workspace/xieqi/"$1" ]
        then
          cd ~/Workspace/xieqi/$1
        else
          echo "unknown project for 'w': $1"
        fi
      fi
    fi
 else
   cd ~/Workspace
 fi
}

#
# ==============================================================================
# builds
# ==============================================================================
#

BUILD_HOME=$HOME/Workspace/build

# ------------------------------------------------------------------------------
# golang
# ------------------------------------------------------------------------------
# At go 1.11, GOPATH is used for mod cache and go install
export GOPATH=~/.cache/go-mod
export GO=go

ed_go() {
  export PATH=/usr/local/go/bin:$PATH
}

# ------------------------------------------------------------------------------
# clang
# ------------------------------------------------------------------------------
export CC=clang
export CXX=clang++

ed_llvm() {
  export PATH=$BUILD_HOME/llvm/install/bin:$PATH
  if [[ "$OSTYPE" == "darwin"* ]]; then
    # for clang compiled from source, SDKROOT is needed to provide sdk path for
    # include. man xcrun and search for SDKROOT.
    #
    # This might conflict with in-house clang.
    export SDKROOT=`xcrun --sdk macosx --show-sdk-path`
  fi
}

# goto llvm easier
function llvm {
  cd ~/Workspace/build/llvm/src
  ed_lite_prompt
}

# ------------------------------------------------------------------------------
# rust
# ------------------------------------------------------------------------------
ed_rs() {
  source "$HOME/.cargo/env"
}

# ------------------------------------------------------------------------------
# python with python venv
# ------------------------------------------------------------------------------
ed_py() {
  source "${BUILD_HOME}/pyenv/bin/activate"
  echo "python3 now is `which python3`"
  echo "pip3    now is `which pip3`"
  echo "alias py=python3 is set up"
  alias py=python3
}

# ------------------------------------------------------------------------------
# macOS
# ------------------------------------------------------------------------------
export BASH_SILENCE_DEPRECATION_WARNING=1

# ------------------------------------------------------------------------------
# fzf
# ------------------------------------------------------------------------------

# set up the default command for fzf (used by fzf and fzf-vim)
#
# 1. no `target` folder (rust).
# 2. no hidden file.
# 3. no bin folder
# 4. no build folder
export FZF_DEFAULT_COMMAND='find . -type f -not -path "*/\.*" -not -path "./bin/*" -not -path ".build*/*"'

# put fzf (installed by vimrc project) into PATH
if [[ -z $TMUX ]]; then
  export PATH=$HOME/.fzf/bin:$PATH
fi

ed_fzf() {
  export PATH=$HOME/.fzf/bin:$PATH
}

# Bash completion
#
# Copied from https://github.com/junegunn/fzf/blob/master/shell/key-bindings.bash
#
# BEGIN

__fzfcmd() {
  [[ -n "$TMUX_PANE" ]] && { [[ "${FZF_TMUX:-0}" != 0 ]] || [[ -n "$FZF_TMUX_OPTS" ]]; } &&
    echo "fzf-tmux ${FZF_TMUX_OPTS:--d${FZF_TMUX_HEIGHT:-40%}} -- " || echo "fzf"
}

__fzf_history__() {
  local output
  output=$(
    builtin fc -lnr -2147483648 |
      last_hist=$(HISTTIMEFORMAT='' builtin history 1) perl -n -l0 -e 'BEGIN { getc; $/ = "\n\t"; $HISTCMD = $ENV{last_hist} + 1 } s/^[ *]//; print $HISTCMD - $. . "\t$_" if !$seen{$_}++' |
      FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} $FZF_DEFAULT_OPTS -n2..,.. --tiebreak=index --bind=ctrl-r:toggle-sort,ctrl-z:ignore $FZF_CTRL_R_OPTS +m --read0" $(__fzfcmd) --query "$READLINE_LINE"
  ) || return
  READLINE_LINE=${output#*$'\t'}
  if [[ -z "$READLINE_POINT" ]]; then
    echo "$READLINE_LINE"
  else
    READLINE_POINT=0x7fffffff
  fi
}


  # CTRL-R - Paste the selected command from history into the command line
bind -m emacs-standard -x '"\C-r": __fzf_history__'

# END

