# vim: ft=bash

# ==============================================================================
# System configurations
#

if [[ "$OSTYPE" == "linux-gnu" ]]; then
  _OS=linux
  _DISTRO=$(awk '/^ID=/' /etc/*-release | awk -F'=' '{ print tolower($2) }')
elif [[ "$OSTYPE" == "darwin"* ]]; then
  _OS=darwin
  _DISTRO=macos
fi

# ------------------------------------------------------------------------------
# locale and color
#
export LANG='en_US.UTF-8'
export TERM='xterm-256color'

# ------------------------------------------------------------------------------
# Ps1 and Prompt
#

# a normal one, trying to display the git branch name.
#
# a sample output looks like
#
# ```
# [~/Workspace/y/dotfiles]
# xiejw:debian-vm (master) -> <cursor>
# ```

function prompt_command {
  export PS1="\n\[\033[1;31m\]${CONDA_PROMPT_MODIFIER}\[\033[0m\][\[\033[1;34m\]\w]\[\033[0m\]\n\[\033[1;${PROMPT_COMMAND_COLOR}m\]\u:\h\[\033[1;33m\] $(${DOTFILES}/bin/prompt)-> \[\033[0m\]"
}

# makes the color different for different hosts.

# -----------------------------------------------
# xieqi vpc category
if [[ "$HOSTNAME" =~ .*xieqi.* ]]; then
  export PROMPT_COMMAND_COLOR=32 # green 2022-11

# -----------------------------------------------
# vm category
elif [[ "$HOSTNAME" =~ dt.* ]]; then
  export PROMPT_COMMAND_COLOR=33 # yellow 2024-08

# -----------------------------------------------
# personal hosts
elif [[ "$HOSTNAME" =~ .*macbook.* ]]; then
  export PROMPT_COMMAND_COLOR=36 # cyan
elif [[ "$HOSTNAME" =~ .*pi.* ]]; then
  export PROMPT_COMMAND_COLOR=35 # magenta 2022-11

# -----------------------------------------------
# defaut
else
  export PROMPT_COMMAND_COLOR=36 # cyan
fi

# -----------------------------------------------
# Finally, exports the prompt_command
export PROMPT_COMMAND=prompt_command

# ------------------------------------------------------------------------------
# Git set up
#
# a function to switch the PROMPT_COMMAND to lite one.
function ed_lite_prompt {
  export LITE_PROMPT=1
}

# ------------------------------------------------------------------------------
# Editor env
#
export EDITOR=vim

# ------------------------------------------------------------------------------
# Global path fix
#
if [[ "$_DISTRO" =~ debian ]]; then
  # for fd-find
  export PATH=$PATH:/usr/lib/cargo/bin/
fi

# ------------------------------------------------------------------------------
# Brew
#
if [[ "$_OS" == 'darwin' ]]; then
  export PATH=/opt/homebrew/bin:$PATH
fi

# ------------------------------------------------------------------------------
# macOS
#
if [[ "$_OS" == 'darwin' ]]; then
  export BASH_SILENCE_DEPRECATION_WARNING=1
fi

# ==============================================================================
# Shortcuts
#

# Alias for system clis
#
alias less='less -i -R'
alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'
alias ll='eza --header --long --color=always'
alias llg='eza --git --header --long --color=always'
alias ll2='eza --header --long --color=always --tree --level=2'

if [[ "$_OS" == "linux" ]]; then
  alias ls='ls --color'
elif [[ "$_OS" == "darwin" ]]; then
  alias ls='ls -G'
fi

# Alias for git
#
alias g='git'
alias ga='git add . && git status -s'
alias gs='git status -s'
alias gd='git diff --color=always'
alias gdd='git diff --color=always --cached'
alias gdu='git diff --name-only --diff-filter=U'
alias gdn='git diff --name-only'
alias gm='git commit -a'
alias gp='git pull --no-rebase'
alias gg='git log --graph --oneline --all'

# Alias for email
#
alias email='~/Workspace/y/tools/email.sh'

# Alias for tmux
#
alias tmux="tmux -2"
alias tad='tmux attach -t 0 -d'
alias ta1='tmux attach -t 1 -d'
alias ta2='tmux attach -t 2 -d'
alias ta3='tmux attach -t 3 -d'

# Alias for docker
#
alias d='docker'
alias dr='docker run --rm -ti'

# Alias for make
#
alias m='make'
alias mc='make compile'
alias mr='make run'
alias mf='make fmt'
alias mt='make test'
alias mta='make ASAN=1 test'
alias mtv='make VERBOSE=1 test'

# Alias for vim
#
alias v='vim'
alias vf='vim `fzf`'
alias vv='vim -c ":call fns#LoadPendingFiles()"'

# Alias for fd
#
alias fd='fd -c always'

# ------------------------------------------------------------------------------
# Jarvis (jv)
#
function jv {
  ed_rs

  if [[ $# -eq 1 ]]; then
    ~/Workspace/.bin/jarvis $1
  else
    ~/Workspace/.bin/jarvis house-keeping
  fi
}

# ------------------------------------------------------------------------------
# Zoxide (must be after brew)
#
eval "$(zoxide init bash)"
alias w='z'

# ==============================================================================
# Builds and Toolchains
#

BUILD_HOME=$HOME/Workspace/build

# ------------------------------------------------------------------------------
# Golang
#
# At go 1.11, GOPATH is used for mod cache and go install
export GOPATH=~/.cache/go-mod
export GO=go

ed_go() {
  export PATH=/usr/local/go/bin:$PATH
}

# ------------------------------------------------------------------------------
# Clang
#
export CC=clang
export CXX=clang++

ed_llvm() {
  if [[ "$PATH" != *"$BUILD_HOME/llvm/install/bin"* ]]; then
    export PATH=$BUILD_HOME/llvm/install/bin:$PATH
  fi
  if [[ "$_OS" == "darwin" ]]; then
    # for clang compiled from source, SDKROOT is needed to provide sdk path for
    # include. man xcrun and search for SDKROOT.
    #
    # This might conflict with in-house clang.
    export SDKROOT=`xcrun --sdk macosx --show-sdk-path`
  fi
}

ed_libcxx() {
  # libcxx
  if [[ "$LIBCXX_PATH" == "" ]]; then
    export LIBCXX_PATH=~/Workspace/build/llvm/install-libcxx
    export CXX="clang++ -nostdinc++ -nostdlib++ -isystem ${LIBCXX_PATH}/include/c++/v1 -L ${LIBCXX_PATH}/lib -Wl,-rpath,${LIBCXX_PATH}/lib -lc++"
    export CXXFLAGS=-Wno-unused-command-line-argument
  fi
}

# ------------------------------------------------------------------------------
# LLVM
#
# Goto llvm easier
function llvm {
  echo ">> cd into llvm build folder" && cd ~/Workspace/build/llvm/
  echo ">> git lite prompt mode is enabled" && ed_lite_prompt
  echo -n ">> curret build: " && \
      (ls -d *build* 2> /dev/null || echo "(not found)")
}

# ------------------------------------------------------------------------------
# Rust
#
ed_rs() {
  rustc --version > /dev/null 2>&1 || source "$HOME/.cargo/env"
}

# ------------------------------------------------------------------------------
# Python venv
#
ed_py() {
  source "${BUILD_HOME}/pyenv/bin/activate"
  echo "python3 now is `which python3`"
  echo "pip3    now is `which pip3`"
  echo "alias py=python3 is set up"
  alias py=python3
}

# ==============================================================================
# FZF
#

# Set up the default command for fzf (used by fzf and fzf-vim)
#
# Legacy FZF cmd with find
# - export FZF_DEFAULT_COMMAND='find . -type f -not -path "*/\.*" -not -path "./bin/*" -not -path ".build*/*" -not -path "./node_modules*/*"'
#
# New cmd is based on fd https://github.com/sharkdp/fd
export FZF_DEFAULT_COMMAND='fd -t f --exclude ./bin'

ed_fzf() {
  fzf --version > /dev/null 2>&1 || export PATH=$HOME/.fzf/bin:$PATH
}

ed_fzf

# ------------------------------------------------------------------------------
# Bash completion with fzf
#

# Helper Method
__fzf_history__() {
     output=`
       builtin fc -lnr -2147483648 |
       uniq |
       sed 's/^[[:space:]]*/  /' |
       fzf --no-sort --query "$READLINE_LINE" |
       sed 's/^[[:space:]]*//' `

     READLINE_LINE=${output}
     READLINE_POINT=${#READLINE_LINE}
}

# Bash Bindinds
# - CTRL-R: Paste the selected command from history into the command line
#
bind -m emacs-standard -x '"\C-r": __fzf_history__'

# ==============================================================================
# END
#
