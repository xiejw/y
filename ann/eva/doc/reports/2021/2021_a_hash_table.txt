# vim: ft=help

Hash Table~

================================================================================

Hash table is a data structure for efficient looking up. It is called
unordered map in cc, map in go, dict in c/redis, HashMap in rust, etc. This
report will summarize all the details about implementation and practice to use
it.

Motivation: Efficiency~
-----------------------

The main idea to have this data structure is its efficient for searching, aka
lookup (see |TAOCP_Vol3|. For searching problem, the number of instructions,
assembly levels, are lower than other data structures, e.g., binary trees,
with reasonable space. See the reference book |TAOCP_Vol3| for a concrete
example. After all, it is all about speed.

A good example for this is perfect hash table used in compiler (lexer)
keywords lookup (see |Go_Keywordmap|). If performance is super critical for
your workflow, consider to optimize the hash table very hard.

================================================================================
Dynamic Change, Chaining, and Rehashing~

Perfect hashing tries to avoid conflicts for static problems, in which all
keys are known ahead of time. For dynamic changing problems, which have
insertions and deletions, it is critical to think the following problems

1. How to arrange the conflicts once it happened, and speed up the searching
   after that?
2. If possible, how to avoid conflicts as much as possible without using too
   much space?

Chaining~
---------

The solution to the question 1 is {chaining}, i.e., links all items with same
hash keys in another data structure, e.g., the linked list for common
implementations. A hidden assumption is all the hashes are uniformly
distributed, so the addition data structure is very cheap for lookup in worse
case. Tree based solution could be used as a replacement for linked list; but
it is not commonly seen in all codebases.

A common solution to the question 2 is |rehashing| (explained later),  once a
threshold (to be defined) is above certain criteria. One possible way is
comparing the load factor and threshold (see |Java_Hashmap_Threshold|), and
performing |rehashing| if exceeds threshold:

    num of items in table
    -----------------------  = load factor > threshold
    num of buckets in table


Rehashing~
----------

Using a hash table with large number of buckets is quite space wasting and not
efficient for memory caching. On the other hand, when the new items are
inserted into the hash table, the number of buckets will soon become
insufficient to hold them. The linked list will perform badly due to hashing
value conflicts. It is a design trade-off to find a practical mechanism for
this.

To solve that, when load factor (see above) exceeds a predefined threshold,
increasing the (buckets) space, followed by {rehashing}, is a common solution.
As implementation details, there are two approaches to consider:

1. Amortized 'O(1)' cost: With this, it typically doubles the space
   before rehashing and then pays the 'O(1)' amortized cost (see
   |Java_Hashmap_Rehash|).

2. Worse case 'O(1)' cost: To avoid spike on processing latency due to the huge
   rehashing cost, incremental rehashing should be considered to move items
   batch by batch over time (see |Redis_Rehash|). The size of each batch
   should be small and constant, say 100, or fixed amount of time measured by
   milliseconds. All should be carefully tuned to meet the runtime needs and
   fit real workflows. With its promising results, the complexity it brings to
   the codebase should be weighted by the use cases.

Memory Safty Regarding Taking Address~
--------------------------------------

Due to |rehashing|, lots of care is needed when taking address of key or items
in the hash table. It is in general unsafe unless call site is sure about
that.

Due to this reason, Go does not allow taking address of any map member (see
|Go_Map_Addr|). Rust borrow checker could catch this kinds of errors during
compilation time.


Security about Hashing Function~
--------------------------------

Although speed is important, hash-flooding denial-of-service attacks need serious
attentions, so a good hashing function with security in mind should be
considered, e.g., |SipHash|.

However, most programmers are not aware these design trade-offs, or do not
even know the choices they can pick up. Some good documentations I found are:

- Rust mentions these concerns in documentation of |Rust_HashMap|.
- C, as always, leaves the choice open to users. Good code base, like
  |Redis_SipHash|, could select according to the use cases.

================================================================================
Open Addressing and Googleâ€™s SwissTable~

As alternative to |chaining|, open addressing |Open_Adressing| is a method to
directly embed items in the buckets array, rather than using an addition data
structure, e.g., linked list.

Pros:
  - Memory caching friendly. Removed extra memory loading. For low-conflicted
    table, you basically get the items for free--one memory loading from cold
    place likely kills all optimization.

Cons:
  - Upon conflicts, implementation is not straightforward. It is very
    challenging to design how to handle `remove` operation. One possible way
    is to mark the deleted item (tombstone) so the following `lookup` can
    perform correctly.

Due to code complexity, open addressing is not commonly seen before. However,
Google SwissTable |Swiss_Table_Blog| is using this method to gain performance
(memory caching). Even more, its design takes advantages of SIMD instructions,
available in all modern CPUs, to further boost the performance. To understand
the details, I recommend to read |Swiss_Table_Intro|, which has a very good
deep dive and the original talk on Youtube.


================================================================================
Generic in C~

Note: This section is quite verbose about step by step design regarding a generic
hashtable in C. It contains lots of details only relevant to C.

For languages with generics, e.g., cc, rust, go, and java, the compiler should
be able to generate efficient code for concrete types. However, due to the fact
c has no generic, this problem could be quite interesting. I consider go has
generic, as of 2021/10, as its map/list has some sort of builtin generic
support.

In my opinion, generic in c is an API design problem for real needs. It is not
one solution for all case.

Naive Solution~
---------------

To start the discussion, we could consider to use following type as linked
list in each bucket:

>
  struct node {
    struct node *next;

    void *key;
    void *value;

    // other field.
  }
<

Here, 'key' could have type as 'char*' as most dictionary uses strings as
keys. This actually works very well for lot of problems.

The caveats are:

- If the value type is int, float, etc, we pay the cost for extra heap
  (de-)allocations and one extra address loading from memory.
- Same as key type.

Storing Values~
---------------

Value storage in hash table is easy. The simple idea is we could save the
builtin types at the same place as the 'void*' address above. One efficient
implementation is embedding a 'union' in the linked list node

>
  struct node {
    struct node *next;

    void *key;

    union {
      double  f64;
      float   f32;
      int32_t i32;
      int64_t i64;
      void   *data;
    } value;

    // other field.
  }
<

With this design, there is no extra cost for both storage and time complexity
(extra address loading from heap). The only caveat is weak type, i.e.,
'void*'; but this is the cost we have to accept in c.

The API returning the value could point to the address of the 'union' value. The
caller is responsible to take the correct variant.

Even better, we could even return the copy of the 'union' value, as there is
no extra cost at all in common calling conversion. See the following example:

>
    // test.c
    #include <stdint.h>

    union value_t {
            int64_t  i64;
            uint64_t u64;
            double   f64;
            float    f32;
            void    *data;
    };

    double __attribute__ ((noinline)) add(union value_t u, union value_t v) {
            return u.i64 + v.f64;
    }

    int test_fn() {
            union value_t u = {.i64 = 123};
            union value_t v = {.f64 = 123};
            return (int) add(u, v);
    }
<

to compile it

>
    $ clang --target=arm64 -std=c99 -O1 -o test.o -c test.c

    $ objdump -d test.o

    test.o:	file format elf64-littleaarch64


    Disassembly of section .text:

    test.o: file format elf64-littleaarch64


    Disassembly of section .text:

    0000000000000000 <add>:
           0: 00 00 62 9e   scvtf   d0, x0
           4: 21 00 67 9e   fmov    d1, x1
           8: 00 28 61 1e   fadd    d0, d0, d1
           c: c0 03 5f d6   ret

    0000000000000010 <test_fn>:
          10: fd 7b bf a9   stp     x29, x30, [sp, #-16]!
          14: fd 03 00 91   mov     x29, sp
          18: 01 00 d8 d2   mov     x1, #211106232532992
          1c: 60 0f 80 52   mov     w0, #123
          20: c1 0b e8 f2   movk    x1, #16478, lsl #48
          24: 00 00 00 94   bl      0x24 <test_fn+0x14>
          28: 00 00 78 1e   fcvtzs  w0, d0
          2c: fd 7b c1 a8   ldp     x29, x30, [sp], #16
          30: c0 03 5f d6   ret
<

The value is passed in 'x0' and 'x1', which is the copy due to function call.
After that, the value is used directly without any other unnecessary address
loading. So, no extra cost due to the calling conversion.


Another minor issue could be: How to avoid the copy from builtin type, say
'int', to this 'union' value? Or, can we save the copy in following code?

>
    union value {
        uint64_t u64;
        double   f64;
        float    f32;
        void    *data;
    }

    void foo(union value_t v) { ... }

    void caller() {
        uint64_t v = ... ;    // get from somewhere
        union value_t value;
        value.u64 = v         // can we save this copy?

        foo(value);
    }
<

The answer to this is union casting (see |Gcc_Union_Cast|), which needs
`-Wno-gnu-union-cast` clang flag to disable the warning, as it is a gcc
extension.

The c code could be
>
    #include <stdint.h>

    union value_t {
            int32_t  i32;
            int64_t  i64;
            uint64_t u64;
            double   f64;
            float    f32;
            void    *data;
    };

    union value_t  __attribute__ ((noinline)) add(union value_t u, union value_t v) {
            return (union value_t) (u.i64 + v.i32);
    }

    int test_fn(int argc) {
            int64_t u = argc;
            int v = 123;
            return add((union value_t)u, (union value_t)v).i32;
    }
<

The assembly for the code above is
>
    test.o:	file format elf64-littleaarch64


    Disassembly of section .text:

    0000000000000000 <add>:
           0: 00 c0 21 8b  	add	x0, x0, w1, sxtw
           4: c0 03 5f d6  	ret

    0000000000000008 <test_fn>:
           8: fd 7b bf a9  	stp	x29, x30, [sp, #-16]!
           c: fd 03 00 91  	mov	x29, sp
          10: 61 0f 80 52  	mov	w1, #123
          14: 00 7c 40 93  	sxtw	x0, w0
          18: 00 00 00 94  	bl	0x18 <test_fn+0x10>
          1c: fd 7b c1 a8  	ldp	x29, x30, [sp], #16
          20: c0 03 5f d6  	ret
<

To avoid using this extension, the code could simply provide a macro to help

>
    #define VALUE_I32(x) ((union value_t) { .i32 = (x) })
    #define VALUE_I64(x) ((union value_t) { .i64 = (x) })

    int test_fn(int argc) {
            int64_t u = argc;
            int32_t v = 123;
            return add(VALUE_I64(u), VALUE_I32(v)).i32;
    }
<


Storing Keys~
-------------

We could apply the same pattern here.

>
  struct node {
    struct node *next;

    union {
      double  f64;
      float   f32;
      int32_t i32;
      int64_t i64;
      void   *data;
    } key;

    union {
      double  f64;
      float   f32;
      int32_t i32;
      int64_t i64;
      void   *data;
    } value;

    // other field.
  }
<

The key and value will be passed by value copying.


================================================================================
Links:

    - {TAOCP_Vol3}: Art of Computer Programming, The: Volume 3: Sorting and Searching
    - {Go_Keywordmap}: https://github.com/golang/go/blob/master/src/cmd/compile/internal/syntax/scanner.go#L431
    - {Java_Hashmap_Threshold}: https://github.com/openjdk-mirror/jdk7u-jdk/blob/master/src/share/classes/java/util/HashMap.java#L203
    - {Java_Hashmap_Rehash}: https://github.com/openjdk-mirror/jdk7u-jdk/blob/master/src/share/classes/java/util/HashMap.java#L767
    - {Redis_Rehash}: https://github.com/redis/redis/blob/unstable/src/dict.c#L203
    - {SipHash}: https://en.wikipedia.org/wiki/SipHash
    - {Rust_HashMap}: https://doc.rust-lang.org/std/collections/struct.HashMap.html
    - {Redis_SipHash}: https://github.com/redis/redis/blob/unstable/src/siphash.c
    - {Go_Map_Addr}: https://stackoverflow.com/questions/32495402/why-does-go-forbid-taking-the-address-of-map-member-yet-allows-slice-el
    - {Gcc_Union_Cast}: https://gcc.gnu.org/onlinedocs/gcc/Cast-to-Union.html
    - {Open_Adressing}: https://en.wikipedia.org/wiki/Open_addressing
    - {Swiss_Table_Blog}: https://abseil.io/blog/20180927-swisstables
    - {Swiss_Table_Intro}: https://blog.waffles.space/2018/12/07/deep-dive-into-hashbrown/
