" vim: foldenable:foldlevel=0:foldmethod=marker

" ==============================================================================
" {{{1 general settings
" ==============================================================================
syntax on               " enable syntax highlighting

set nocompatible        " make Vim behave in a more useful way
set mouse=a             " enable mouse in all modes (normal, visual, etc)
set colorcolumn=80,100  " screen columns that are highlighted with ColorColumn
set backspace=2         " make backspace work like most other programs
set splitright          " if off, vsplit to left
set shiftwidth=2        " number of spaces to use for each step of (auto)indent
set tabstop=2           " number of spaces that a <tab> in the file counts for
set expandtab           " in insert mode: use spaces to insert a <tab>
set softtabstop=2       " number of spaces that a <tab> counts for while editing
set cindent             " indent for line according the C indenting rules
set noignorecase        " ignore case in a pattern
set noinfercase         " case sensitive for auto-complete
set showcmd             " show selecting area size in visual mode, cmd in normal
set nu                  " line number
set cursorline          " highlight the cursor line with CursorLine
set ruler               " show the line and column number of the cursor pos
set vb                  " use a visual bell instead of beeping
set modeline            " enable the 'modeline' option when editing a new file
set modelines=5         " must be set to enable modeline
set incsearch           " search pattern while typing in search.
set encoding=utf8       " character encoding
set nofoldenable        " disable fold in general.
set foldlevel=1         " folds with a higher level will be closed
set foldcolumn=0        " >0, show a col in the specified width indicating fold
set nospell             " disable spell. spelllang=en_us
set nowrapscan          " disable searches wrapping around the end of the file

set wildmenu            " possible matches are shown just above the command line
set wildmode=longest:full " emacs-style filename matching
set completeopt=longest,menuone " completion mode in insert mode

filetype plugin indent on
filetype plugin on

" disable netrw plugin which writes a .netrwhist file in ~/.vim when open dir
let g:loaded_netrw       = 1
let g:loaded_netrwPlugin = 1

" ==============================================================================
" {{{1 vim plugs
" ==============================================================================
call plug#begin('~/.vim/plugged')

" ------------------------------------------------------------------------------
" tiled window management for Vim, like dwm
"
" <c-n> creates a new window and place it in the master pane [M] & stacks all
"       previous windows in the stacked pane [S]
" <c-c> close the current window if no unsaved changes
" <c-j> jumps to next window (clockwise)
" <c-k> jumps to previous window (anti-clockwise)
" <c-space>
"       focus the current window, that is, place it in the master pane [M] &
"       stacks all other windows in the stacked pane [S]
"
Plug 'xiejw/dwm.vim'

" ------------------------------------------------------------------------------
" airline
"
Plug 'vim-airline/vim-airline', {'commit': 'f86f1e8' }  " 2017-06

" adjust: setup the fonts for ubuntu.
"
" follow https://github.com/powerline/fonts and select the font in termial
" profile (say xfce4-terminal with Droid Sans Mno Dotted for Powerline 9).
let g:airline#extensions#tabline#enabled = 1
let g:airline_section_b = '%{strftime("%c")}'
set laststatus=2

" ------------------------------------------------------------------------------
" fzf
"
" search FZF_DEFAULT_COMMAND in bash_profile
Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --bin', 'commit': '9cb7a36'} " 2022-01
Plug 'junegunn/fzf.vim', {'commit': '70541d2'} " 2022-01

" ------------------------------------------------------------------------------
" dracula
"
" adjust: disable italic fonts to avoid the background highlight bugs.
" see https://github.com/dracula/vim/issues/81
"
" Plug 'dracula/vim', {'commit': 'b64b22a'} " 2020-08
" let g:dracula_italic = 0

" ------------------------------------------------------------------------------
" nord
"
" see https://github.com/arcticicestudio/nord-vim
Plug 'arcticicestudio/nord-vim', {'commit': 'bc0f057'} " 2022-09

" ------------------------------------------------------------------------------
" indent line
"
Plug 'Yggdroot/indentLine', {'commit': '7753505'} " 2022-04
let g:indentLine_enabled = 0

call plug#end()

" ==============================================================================
" {{{1 colors settings
" ==============================================================================

" ------------------------------------------------------------------------------
" dracula
"
set background=dark " background must be set before colorscheme
" colorscheme dracula
colorscheme nord

" ------------------------------------------------------------------------------
" color adjustments
"
" define color for current line number. `set cursorline` must be set.
hi CursorLineNR ctermfg=Cyan
" define a special group for some languages, used in c, etc.
hi MyCKeyword ctermbg=DarkCyan ctermfg=Black
" change comment to darg green. makes it visible in terminal (usually is blue).
"hi Comment ctermfg=DarkMagenta
hi Comment ctermfg=LightGrey
" make the visual selection more visible. 166 is orange.
hi visual ctermbg=166
" make the pop up menu more visible. 166 is orange.
hi PmenuSel ctermfg=White ctermbg=166

" ==============================================================================
" {{{1 leaders
" ==============================================================================
let mapleader = ","
set timeoutlen=500

" ------------------------------------------------------------------------------
" refresh or save the file content
"
nmap <silent> <leader>r :e! <CR>

" ------------------------------------------------------------------------------
" navigation for buffers
"
nmap <silent> <leader>b :bn! <CR>
nmap <silent> <leader>B :bp! <CR>
nmap <silent> <leader>t :tabn <CR>
nmap <silent> <leader>T :tabp <CR>
nmap <silent> <leader>1 :tabn 1<CR>
nmap <silent> <leader>2 :tabn 2<CR>
nmap <silent> <leader>3 :tabn 3<CR>
nmap <silent> <leader>4 :tabn 4<CR>

" ------------------------------------------------------------------------------
" some switches for spell, paste, etc
"
nmap <silent> <leader>p :set paste<CR>
nmap <silent> <leader>np :set nopaste<CR>
nmap <silent> <leader>s :set spell<CR>
nmap <silent> <leader>ns :set nospell<CR>

" ------------------------------------------------------------------------------
" list the files to open, such as recent files, pending files in git
"
nmap <silent> <leader>lb :call fns#LoadRecentFiles()<CR>
nmap <silent> <leader>ll :call fns#LoadPendingFiles()<CR>

" ------------------------------------------------------------------------------
" tagbar
"
" see https://github.com/preservim/tagbar/blob/master/doc/tagbar.txt for
" flags. f is auto focus and c is auto close.
nmap <silent> <leader>lt :TagbarToggle fc<CR>

" ------------------------------------------------------------------------------
" fzf
"
" check FZF_DEFAULT_COMMAND env var for the command to use.
"
nmap <silent> <leader>zz :call fzf#run({
        \ 'source': $FZF_DEFAULT_COMMAND,
        \ 'sink': 'e',
        \ 'options': '-i',
        \ 'down': '40%'})<cr>

" ------------------------------------------------------------------------------
" indentLine
"
nmap <silent> <leader>i :IndentLinesToggle<cr>

" ------------------------------------------------------------------------------
" open files related
"
" open in current working dir
" open in current working dir but in a new tab
"
nmap <silent> <leader>ee :e %:p:h/
nmap <silent> <leader>et :tabnew %:p:h/

" ------------------------------------------------------------------------------
" put `` and '' around a word
"
nmap <silent> <leader>` bi`<esc>wea`<esc>
nmap <silent> <leader>' bi'<esc>wea'<esc>

" ------------------------------------------------------------------------------
" insert a 80-char line
"
" useful in comments and ft=help mode
"
nmap <silent> <leader>- i-<esc>79.
nmap <silent> <leader>= i=<esc>79.

" ------------------------------------------------------------------------------
" insert a code block for help mode.
"
" ```
" >
"     <cursor>
" <
" ```
"
nmap <silent> <leader>> i><esc>o<<esc>O<esc>i <esc>$<esc>4.a

" ==============================================================================
" other mappings
" ==============================================================================

" ------------------------------------------------------------------------------
" kill the current buffer without losing split
"
nmap <silent> <leader>d :bp \| bd #<CR>

" ------------------------------------------------------------------------------
" map tab to auto complete
"
imap <tab> <c-x><c-p>

nnoremap <space> za
nnoremap <tab> zi

" ==============================================================================
" {{{1 filetype related
" ==============================================================================

" {{{2 general
" ------------------------------------------------------------------------------
" general
"
" delete tailing spaces for all lines (all files). The env var can turn it
" off.
if empty($DOTFILES_VIM_NOT_DEL_EMPTY_LINESEND)
  autocmd BufWritePre * :call fns#DelEmptyLinesEnd()
endif

" auto detect and load file change
"
" Ask vim to check file timestamp (checktime). Once detected new change, due
" to `autoread`, the content will be loaded.
autocmd CursorHold * checktime
set autoread

" ------------------------------------------------------------------------------
" --- comments, formating, and pattern
"
" - comments is a comma separated list of string parts to start comments. A
"   part has format {flags}:{literal text}
"
" - formatoptions: a string that contains any letters below to control Vim fmt
"
"   t  Auto-wrap text using textwidth
"   c  Auto-wrap comments using textwidth, inserting the current comment
"      leader automatically.
"   r  Automatically insert the current comment leader after hitting
"      <enter> in Insert mode.
"   o  Automatically insert the current comment leader after hitting 'o' or
"      'O' in Normal mode.
"   q  Allow formatting of comments with "gq".
"      Note that formatting will not change blank lines or lines containing
"      only the comment leader.
"   n  When formatting text, recognize numbered lists.  This actually uses
"      the 'formatlistpat' option, thus any kind of list can be used. Note that
"      'autoindent' must be set too.  Doesn't work well together with "2".
"   2  When formatting text, use the indent of the second line of a paragraph
"      for the rest of the paragraph, instead of the indent of the first
"      line.  This supports paragraphs in which the first line has a
"      different indent than the rest.  Note that 'autoindent' must be set.
"
" - formatlistpat or flp:  A pattern that is used to recognize a list header.
"   This is used for the "n" flag in 'formatoptions'.
"
" - pattern
"
"     with `magic` on,
"
"         $      matches end-of-line
"         .      matches any character
"         *      any number of the previous atom
"         ~      latest substitute string
"         \(\)   grouping into an atom
"         \|     separating alternatives
"         \a     alphabetic character
"         \\     literal backslash
"         \.     literal dot
"         {      literal '{'
"         a      literal 'a'
"
"     see :h pattern.
"
"     for example, in search cmd, /a\(b\|c\) will search ab and ac.
"
"     for option value, the number of backslash is doubled. For example the
"     flp used in this vimrc. see :h option-backslash.
"

" {{{2 vim
" ------------------------------------------------------------------------------
" --- vim
"
autocmd FileType vim :setlocal foldlevel=2 foldmethod=marker

" {{{2 c
" ------------------------------------------------------------------------------
" --- c
"
" - make header files as c not cpp.
" - set shift and tabstop per linux kernel style.
"
" autocmd BufRead,BufNewFile *.h setlocal filetype=c
autocmd FileType c :setlocal shiftwidth=8 tabstop=8 softtabstop=8
autocmd FileType c :setlocal nofoldenable foldmethod=syntax foldcolumn=1 foldlevel=0
autocmd BufRead,BufNewFile *.h setlocal filetype=c

" customize syntax for c
" - see 'help usr_44.tx'
" - see colors in https://en.wikipedia.org/wiki/ANSI_escape_code#Colors
"
" - define some keywords for storage, e.g., _mut_, _out_,
autocmd FileType c :match cStorageClass /\<_mut_\|_out_\|_inout_\|_moved_in_\|_null_\>/

" - added more int types and error_t as cType
autocmd FileType c :syn keyword	cType	i64_t u64_t i32_t u32_t f32_t f64_t
autocmd FileType c :syn keyword	cType	vec_t error_t sds_t

" - highlight function for c, check \ze in pattern
autocmd FileType c :syn match cFunction "\<\k\+\ze("
autocmd FileType c :hi link cFunction Function

" - highlight field (-> or .) for c and adjust the colors for it and String.
autocmd FileType c :syn match cField /\(->\|\.\)\<\k\+\>/
autocmd FileType c :hi cField ctermfg=Green
autocmd FileType c :hi String ctermfg=Red

" - highlight the entire type with type name for struct/union/enum (instead of
"   just the keywords)
autocmd FileType c :syn clear cStructure
autocmd FileType c :syn match cStructureType /\(struct\|union\|enum\) \<\k\+\>/
autocmd FileType c :hi cStructureType ctermfg=Yellow

" ------------------------------------------------------------------------------
source ~/Workspace/y/vimrc/vimrc.programming_language.vim
