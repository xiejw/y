# vim: ft=help formatoptions+=2

REDIS READING NOTES

(working in progress)

================================================================================
                                                                          *tldr*

This is a (very) long reading notes for Redis. And document file by file. A
high level summary will be written once all files are read.

Portable C~

Redis is mainly written in c99. It is quite portable with some very small
extensions.

Atomics might use extension or c11 features. No assembly code is found.

Performance~

Though Redis can be compiled and used for most unix-like system, it is tested,
benchmarked, and optimized mainly on Linux. So, the design overfits that
platform a lot. It needs quite deep system design knowledge and system call
domain skills.


Interesting Files to Read~

- |aof.c|
- |ae.c|

================================================================================
                                                                    *background*

The code is forked in my own github for reading purposes.

    https://github.com/xiejw/redis/tree/unstable/src

General~

The header file is at 'server.h'. For some data structures, the header is
seperated, e.g., 'sds.h'.

The major consideration is performance, both speed and memery usages. For
example,

- when dump is happending (via 'fork'), dict resharding will be disable to
  avoid pages copy-on-write
- when run cron tasks, it takes small batch each time to avoid latency.

================================================================================
                                                               *individual-file*

File *ae.c* *ae.h*~
-------------------

The event loop handling library. It handles both the time events and socket
events.

- For efficiency, the library assumes each callback is fast.
- In addition, the events are organized as a flat arrray, i.e., 'events[fd]'
  is the event. It might look like not space efficient; but it turns out to be
  very smart on the second thought. UNIX allocates smallest 'fd' for new socket.
  So, the array will be packed automatically.

Time Events~

    Time events are implemented via an unsorted linked list. So it is not that
    efficient at the moment, i.e., O(n) cost for searching and ranking; but it
    is ok.

    During time event deletion, 'id' is marked as 'AE_DELETED_EVENT_ID'. The
    clean up is handled by 'processTimeEvent()', in which
    'event.finalizerProc' is called.

    'processTimeEvent()' not only deletes orphan time events but also
    processes {fired} time events. Based on return values, it will be marked
    as orphan (deleted) or happen-again (adjust the next time point).

Socket Events~

    Socket events reply on the IO multiplexing functionalities, provided by
    'kqueue', 'epoll', 'select', etc.

    Note: The 'ae' lib has different implementations depending on the platforms
    to use. The 'ae.c' file will include the 'select'/'epoll'/'kqueue' file
    accordingly according to availability and performance. The API defined in
    those files are generic so the |ae.c| file can use them without
    understanding the implementation. For example,

    - epoll manages the 'epfd' 'open' and 'close' as part of the
      implementation details.
    - Similarly, 'select' needs to maintain two sets of the 'fds' (per API
      requirement) and loop over the max 'fd' to detect the "ready" state.

Both Events~

    'aeProcessEvents()' processes every time events, by calling
    'processTimeEvent()' and then processes any {fired} socket events.

    It is very smart. It calculates the next time event by calling
    'msUntilEarliestTimer()' and uses the result to set the 'timeout' option
    for polling. Before and after polling, two callbacks are invoked:
    'beforesleep' and 'aftersleep'.

    It checks the {fired} event, read/write and calls the corresponding
    process handler.

'aeMain()' loops until 'ae.stop' is set.


File *anet.c* *anet.h*~
-----------------------

|anet.h| provides helper tools for networking related stuff, e.g., 'bind',
'connect', 'listen', 'read' and 'write'. It can be considered as a high level
library to make the programming easier.

Two interesting things are

- For non-blocking socket programming, 'read', and especially 'write', can be
  partitially done. This library provides loop-based implementation to keep
  reading or writing until 'num_bytes' is fulfilled.

- For 'connect', it supports client-side bind also. It is very rare. In case
  of failure, it will try to do another connect, i.e., best effort bind.

socket option~

    man getsockopt

    KEEPALIVE           Periodically check socket connection.
    TCP_NODELAY         Dont delay small packet transmissions.
    _TIMEOUT            Specify the timeout on operations.
    _BUFSIZE            Specify the buf size for socket.


File ae_*.c~
-------------------

'ae_select' provides the 'select' implementation for |ae.h|. Not scalable but
portable.

The 'fdset' is modified by the 'select' so we must make a copy for next usage.

Similarly, 'ae_epoll.c', 'ae_evport.c', and 'ae_kqueue.c' provide other
implementaitons based on plaftorm, e.g., epoll for linux, kqueue fo bsd.

File *aclist.h* *adlist.c*~
---------------------------

General purpose linked list data structure. It supports forward and backward
direction iterations. And supports rotating a head to tail.

File *bitops.c*~
----------------

Bits related operations with performance in mind. It would be optimized future
using hardware specific instructions. But it is ok now.

File *aof.c*~
-------------

aof in redis has three big components.

================================================================================
                                                                  *unread-files*

acl.c
asciilogo.h
atomicvar.h
bio.c
bio.h
blocked.c
childinfo.c
cli_common.c
cli_common.h
cluster.c
cluster.h
config.c
config.h
connection.c
connection.h
connhelpers.h
crc16.c
crc16_slottable.h
crc64.c
crc64.h
crcspeed.c
crcspeed.h
db.c
debug.c
debugmacro.h
defrag.c
dict.c
dict.h
endianconv.c
endianconv.h
evict.c
expire.c
fmacros.h
geo.c
geo.h
geohash.c
geohash.h
geohash_helper.c
geohash_helper.h
gopher.c
help.h
hyperloglog.c
intset.c
intset.h
latency.c
latency.h
lazyfree.c
listpack.c
listpack.h
listpack_malloc.h
localtime.c
lolwut.c
lolwut.h
lolwut5.c
lolwut6.c
lzf.h
lzfP.h
lzf_c.c
lzf_d.c
memtest.c
module.c
monotonic.c
monotonic.h
mt19937-64.c
mt19937-64.h
multi.c
networking.c
notify.c
object.c
pqsort.c
pqsort.h
pubsub.c
quicklist.c
quicklist.h
rand.c
rand.h
rax.c
rax.h
rax_malloc.h
rdb.c
rdb.h
redis-benchmark.c
redis-check-aof.c
redis-check-rdb.c
redis-cli.c
redisassert.c
redisassert.h
redismodule.h
release.c
release.h
replication.c
rio.c
rio.h
scripting.c
sds.c
sds.h
sdsalloc.h
sentinel.c
server.c

L1777 cron tasks to iter over clients. It tracks resource usages, checks timeout clients.  For performance reason, it processes a small batch of clients each time and rotates the list head.


server.h
setcpuaffinity.c
setproctitle.c
sha1.c
sha1.h
sha256.c
sha256.h
siphash.c
slowlog.c
slowlog.h
solarisfixes.h
sort.c
sparkline.c
sparkline.h
stream.h
syncio.c
t_hash.c
t_list.c
t_set.c
t_stream.c
t_string.c
t_zset.c
testhelp.h
timeout.c
tls.c
tracking.c
util.c
util.h
version.h
ziplist.c
ziplist.h
zipmap.c
zipmap.h
zmalloc.c
zmalloc.h


sds

  sds.h sds.c

  related Links:
    https://redis.io/topics/internals-sds
    https://github.com/antirez/sds
    https://github.com/redis/redis/blob/unstable/src/sds.h

  note here sds is a typedef of char*. It is not the strucutre of sdshdr. So,
  s[-1] is a valid operaion to access the header.

zmalloc

  zmalloc.h zmalloc.c
  atomicvar.h

  a thin wrapper on possible backends, tcmalloc, jemalloc, etc
  one feature is redis tracks the total usage of memory. so the malloc method
    calls the atomic op to increase the size.

dict (hash table)

  dict.h dict.c

  Every dictionary has two of this as we implement incremental rehashing, for
  the old to the new table. It seems that toward O(1) overhead, eacy dict api
  re-sharding the table a little.

object.

  server.h object.c

  a thin ds with refcount, type, encoding and ptr to backing data. LRU (least
  recently used) related code has not been read yet.

  refcount is allowed by to 1, and OBJ_SHARED_REFCOUNT (server.h, which is
  INT_MAX). The incrRefCount and decreRefCount will free the obj if ref count is
  zero.

  embedding str: a string object with encoding OBJ_ENCODING_EMBSTR, that is an
  object where the sds string is actually an unmodifiable string allocated in
  the same chunk as the object itself. For general string object,
  createStringObject is called, which selects the embedding str so it fits 64
  byte arena of jemalloc.

  sdsEncoded (objptr->encoding == OBJ_ENCODING_RAW || objptr->encoding == OBJ_ENCODING_EMBSTR)

  getDecodedObject
    if sdsEncoded. incr ref count and returns it
    if type == string and encoding is int, creates a string obj.
    ow, error

  getXXFromObject

Bio threads.

  bio.h bio.c

  There are several dedicated threads handing fifo heavy tasks. The main thread
  pays the mutex cost

geo
  geo.* geohash.*

  https://www.compose.com/articles/a-quick-guide-to-redis-3-2s-geo-support/

  geohash based solution. backed by t_zset.

zset orderd

  t_zset.c

  orderd set. backed by dict and skiplist. span is the number of skipped nodes
  for the forward link.

list


