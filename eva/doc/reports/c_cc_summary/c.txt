# vim: ft=help

C PROGRAMMING LANGUAGE

================================================================================
INTS

C has many, indeed many, types for the integers, e.g., 'char', 'short', etc >

  Types                 Header      Note

  [u]int(8/16/32/64)_t  stdint.h    Exactly 8, 16, 32 and 64 bits.
  [u]intptr_t           stdint.h    Integer type capable of holding a pointer.
  [s]size_t             stddef.h    Integral type of the result of the
                                    sizeof operator. Introduced by POSIX
  ptrdiff_t             stddef.h    Signed integral type of the result of
                                    subtracting two pointers. Introdced by C
                                    standard.

PRINTF~

For all 'int'/'long' types, the 'printf' length field is not very platform
portable. So special handling is needed.

According to [1], this is the field to use >

  Types                     Length Field

  int                       d
  long                      ld
  unsigned long             lu
  long long                 lld
  unsigned long long        llu
  ptrdiff_t                 td
  size_t                    zu
  ssize_t                   zd
  uint64_t                  PRIu64    == llu (32bit) or lu (64bit)
  int64_t                   PRId64    == lld (32bit) or ld (64bit)


[1] https://en.wikipedia.org/wiki/Printf_format_string

HOW TO CHOOSE TYPES~

Linux kernel [1] assumes the following inequality

>
   4  = sizeof(int)
     <= sizeof(long)
      = sizeof(pointer)
      = sizeof(size_t)
      = sizeof(ptrdiff_t)
     <= sizeof(long long)
      = 8
<

in addition, [2] gives suggests 'ptrdiff_t' over 'ssize-t'

[1] https://yarchive.net/comp/linux/int_types.html
[2] https://lists.gnu.org/archive/html/emacs-devel/2014-10/msg00019.html

================================================================================
MACROS

Consider the following example >

  struct command {
    char *name;
    void (*function) (void);
  };

  struct command commands[] = {
    { "quit", quit_command },
    { "help", help_command },
  };

The macros to do that could be >

  #define COMMAND(NAME)  { #NAME, NAME ## _command }

  struct command commands[] = {
    COMMAND (quit),
    COMMAND (help),
  };

Ref: https://gcc.gnu.org/onlinedocs/cpp/Concatenation.html

================================================================================
EXTENSIONS


STATEMENT EXPRESSIONS~

https://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html#Statement-Exprs

A compound statement enclosed in parentheses may appear as an expression in
GNU C. The last thing in the compound statement should be an expression
followed by a semicolon; the value of this subexpression serves as the value
of the entire construct. >

    ({ int y = foo (); int z;
       if (y > 0) z = y;
       else z = - y;
       z; })

TYPEOF~

https://gcc.gnu.org/onlinedocs/gcc/Typeof.html#Typeof

'typeof' provides the type of the expression. For example >

    #define max(a,b) \
      ({ typeof (a) _a = (a); \
          typeof (b) _b = (b); \
        _a > _b ? _a : _b; })
